common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(fitObj_sm2)
figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
View(stats)
library('sicegar')
libary('scater')
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
rownames(bulk.experiments.list$TruSeq)
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(fitObj_sm2)
figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
fitObj_sm$decisionProcess
# fitObj_sm <- fitAndCategorize(dataInput = Data)
# figureModelCurves(dataInput = fitObj_sm$normalizedInput,
#                 sigmoidalFitVector = fitObj_sm$sigmoidalModel,
#                 showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
fitObj_sm$sigmoidalModel
# g = ggplot(Data, aes(x,y)) + geom_point() + geom_smooth() + xlab("Mean expression in bulk") + ylab("Capture Efficiency") + ggtitle(TechNames[[i]])
# print(g)
# ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
}
length(Dropout_rate)
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 2, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(fitObj_sm2)
figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
fitObj_sm$decisionProcess
# fitObj_sm <- fitAndCategorize(dataInput = Data)
# figureModelCurves(dataInput = fitObj_sm$normalizedInput,
#                 sigmoidalFitVector = fitObj_sm$sigmoidalModel,
#                 showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
fitObj_sm$sigmoidalModel
# g = ggplot(Data, aes(x,y)) + geom_point() + geom_smooth() + xlab("Mean expression in bulk") + ylab("Capture Efficiency") + ggtitle(TechNames[[i]])
# print(g)
# ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
}
View(stats)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 20, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(fitObj_sm2)
figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 20, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(fitObj_sm2)
g = figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
print(g)
#   ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
# fitObj_sm <- fitAndCategorize(dataInput = Data)
# figureModelCurves(dataInput = fitObj_sm$normalizedInput,
#                 sigmoidalFitVector = fitObj_sm$sigmoidalModel,
#                 showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
# g = ggplot(Data, aes(x,y)) + geom_point() + geom_smooth() + xlab("Mean expression in bulk") + ylab("Capture Efficiency") + ggtitle(TechNames[[i]])
# print(g)
# ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
}
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 20
parameterVector = parameterCalculation(fitObj_sm2)
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 20)
parameterVector = parameterCalculation(fitObj_sm2)
g = figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
print(g)
#   ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
# fitObj_sm <- fitAndCategorize(dataInput = Data)
# figureModelCurves(dataInput = fitObj_sm$normalizedInput,
#                 sigmoidalFitVector = fitObj_sm$sigmoidalModel,
#                 showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
# g = ggplot(Data, aes(x,y)) + geom_point() + geom_smooth() + xlab("Mean expression in bulk") + ylab("Capture Efficiency") + ggtitle(TechNames[[i]])
# print(g)
# ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
}
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalizedInput, tryCounter = 20, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(parameterVector)
g = figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
print(g)
#   ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
# fitObj_sm <- fitAndCategorize(dataInput = Data)
# figureModelCurves(dataInput = fitObj_sm$normalizedInput,
#                 sigmoidalFitVector = fitObj_sm$sigmoidalModel,
#                 showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
# g = ggplot(Data, aes(x,y)) + geom_point() + geom_smooth() + xlab("Mean expression in bulk") + ylab("Capture Efficiency") + ggtitle(TechNames[[i]])
# print(g)
# ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
}
library('sicegar')
library('scater')
mean_bulk_expr = rowMeans(exprs(bulk.experiments.list$TruSeq))
Dropout_rate = lapply(sc.experiments.sce.list.qced, function(x) { rowMeans(counts(x) == 0) });
TechNames = names(sc.experiments.sce.list.qced)
for (i in 1:length(Dropout_rate)) {
common_genes = intersect(rownames(bulk.experiments.list$TruSeq), names(Dropout_rate[[i]]))
bulk_rows = match(common_genes, rownames(bulk.experiments.list$TruSeq))
sc_rows = match(common_genes, names(Dropout_rate[[i]]))
bulk_mean_expression = mean_bulk_expr[bulk_rows]
capture_efficiency = 1-Dropout_rate[[i]][sc_rows]
s = sort(bulk_mean_expression, index.return=T)
dataInput <- data.frame(time = bulk_mean_expression[s$ix], intensity = capture_efficiency[s$ix])
normalized_data = normalizeData(dataInput)
parameterVector <- sigmoidalFitFunction(normalized_data, tryCounter = 20, upperBounds = c(maximum = 1, slopeParam = 180,  midPoint = 1.15))
parameterVector = parameterCalculation(parameterVector)
g = figureModelCurves(dataInput = normalized_data,
sigmoidalFitVector = parameterVector,
showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
if(i == 1) {
stats = parameterVector
} else {
stats = rbind(stats, parameterVector)
}
print(g)
#   ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
# fitObj_sm <- fitAndCategorize(dataInput = Data)
# figureModelCurves(dataInput = fitObj_sm$normalizedInput,
#                 sigmoidalFitVector = fitObj_sm$sigmoidalModel,
#                 showParameterRelatedLines = TRUE, xlabelText = "Mean bulk expression", ylabelText = "Capture efficiency")
# g = ggplot(Data, aes(x,y)) + geom_point() + geom_smooth() + xlab("Mean expression in bulk") + ylab("Capture Efficiency") + ggtitle(TechNames[[i]])
# print(g)
# ggsave(filename = sprintf('%s_Dropout_vs_meanExpression.png', TechNames[[i]]), device="png", path="images/")
}
View(stats)
parameterVector$slope
parameterVector$midPoint_Estimate
getwd()
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source('../library/data_load.R')
source('../library/colors_and_plots.R')
source('../library/utils.R')
if (!file.exists(rdsDir)) dir.create(rdsDir)
sc.experiments.sce.list.qced = readRDS(file="./archive-rdsFiles/sc.experiments.sce.list.qced.rds")
x = sc.experiments.sce.list.qced[1]
x
colData(x)
x = sc.experiments.sce.list.qced[[1]]
colData(x)
colData(x)$treatment
colData(x)$treatment == "TSA"
which(colData(x)$treatment == "TSA")
dim(x)[1]
thread_no = 8;
rows = c(1, dim(x)[1]);
cols = which(colData(x)$treatment == "TSA");
gene_pvals = AssessFeatures(x, rows, cols, thread_no);
library(NetDECODE)
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals = AssessFeatures(x, rows, cols, thread_no);
library('Matrix')
X = x
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
gene_pvals = AssessFeatures(x, rows, cols, thread_no);
X_sparse = as(X, "sparseMatrix")
X_sparse = as(exprs(X), "sparseMatrix")
cols = which(colData(X)$treatment == "TSA");
gene_pvals = AssessFeatures(x, rows, cols, thread_no);
cols = which(colData(X)$treatment == "TSA");
gene_pvals = AssessFeatures(x, rows, cols, thread_no);
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
gene_pvals = AssessFeatures(x, rows, cols, thread_no);
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals
p.adjust(gene_pvals, method='BY')
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(gene_pvals)
names(gene_pvals)
row.names(X)
row.names(X)(gene_pvals_corr < pval_threshold)
pval_threshold = 0.01
row.names(X)(gene_pvals_corr < pval_threshold)
row.names(X)[gene_pvals_corr < pval_threshold]
pval_threshold = 0.05
row.names(X)[gene_pvals_corr < pval_threshold]
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
Diff_genes = lapply(sc.experiments.sce.list.qced, function(x) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
Diff_genes
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
Diff_genes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
Diff_genes
require(viridis, quietly = T)
require(ComplexHeatmap, quietly = T)
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
GeneRows = mapply(function(Ug, Dg) {cbind(Ug, Dg)}, Ug = UpGenes, Dg = DownGenes)
GeneRows = mapply(function(Ug, Dg) {rbind(Ug, Dg)}, Ug = UpGenes, Dg = DownGenes)
UpGenes[[1]]
Ug = UpGenes[[1]]
Dg = DownGenes[[1]]
Dg
Dg = DownGenes[[2]]
Dg
rbind(Ug, Dg)
d(Ug, Dg)
c(Ug, Dg)
dim(rownames(sc.experiments.sce.list.qced[[1]]))
dims(rownames(sc.experiments.sce.list.qced[[1]]))
rownames(sc.experiments.sce.list.qced[[1]])
length(rownames(sc.experiments.sce.list.qced[[1]]))
length(rownames(sc.experiments.sce.list.qced[[3]]))
length(rownames(sc.experiments.sce.list.qced[[4]]))
which(c(Ug, Dg) %in% rownames(sc.experiments.sce.list.qced[[1]]))
match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
GeneRows
pval_threshold = 1e-10
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 1e-10
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
sapply(DownGenes, length)
sapply(UpGenes, length)
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BY')
row.names(X)[gene_pvals_corr < pval_threshold] } )
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
sapply(DownGenes, length)
sapply(UpGenes, length)
Reduce(intersect, DownGenes)
Reduce(intersect, DownGenes(2:))
Reduce(intersect, DownGenes[2:])
DownGenes[2:]
DownGenes[-1]
Reduce(intersect, DownGenes[-1])
Reduce(intersect, UpGenes[-1])
gene_pvals_corr = p.adjust(gene_pvals, method='none')
library(NetDECODE)
library('Matrix')
thread_no = 8;
pval_threshold = 0.05
UpGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "TSA");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BH')
row.names(X)[gene_pvals_corr < pval_threshold] } )
DownGenes = lapply(sc.experiments.sce.list.qced, function(X) {
rows = c(1, dim(X)[1]);
cols = which(colData(X)$treatment == "DMSO");
X_sparse = as(exprs(X), "sparseMatrix")
gene_pvals = AssessFeatures(X_sparse, rows, cols, thread_no);
gene_pvals_corr = p.adjust(gene_pvals, method='BH')
row.names(X)[gene_pvals_corr < pval_threshold] } )
Reduce(intersect, DownGenes[-1])
Reduce(intersect, UpGenes[-1])
GeneRows = mapply(function(Ug, Dg) {match(c(Ug, Dg), rownames(sc.experiments.sce.list.qced[[1]]))}, Ug = UpGenes, Dg = DownGenes)
Reduce(intersect, UpGenes[-1])
Reduce(intersect, DownGenes[-1])
sharedRows = match(c(sharedUp, sharedDown), rownames(sc.experiments.sce.list.qced[[1]]))
sharedDown = Reduce(intersect, DownGenes[-1])
sharedUp = Reduce(intersect, UpGenes[-1])
sharedRows = match(c(sharedUp, sharedDown), rownames(sc.experiments.sce.list.qced[[1]]))
sharedRows
x = sc.experiments.sce.list.qced[[1]]
name(x)
names(x)
sc.experiments.sce.list.qced
names(sc.experiments.sce.list.qced)
i = 1
pp <- Heatmap(Scale.rows(sc.experiments.sce.list.qced[[i]]), col = inferno(10), show_row_names = F, name=names(sc.experiments.sce.list.qced[[i]]), row_title = "Differential genes")
pp <- Heatmap(Scale.rows(exprs(sc.experiments.sce.list.qced[[i]])), col = inferno(10), show_row_names = F, name=names(sc.experiments.sce.list.qced[[i]]), row_title = "Differential genes")
print(pp)
pp
pp <- Heatmap(Scale.rows(exprs(sc.experiments.sce.list.qced[[i]])), col = inferno(10), show_row_names = F, name=names(sc.experiments.sce.list.qced[[i]]), row_title = "Differential genes")
png("NetDECODE_heatmap.png")
pp
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomeInfoDb")
install.packages("RCurl")
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomeInfoDb")
update.packages(ask = FALSE, dependencies = c('Suggests'))
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
library(SummarizedExperiment, quietly = T)
setwd('/home/shahin/Dropbox/Projects/SingleCell/repositories/ACTION/ACTION/Rpackage')
library(Rcpp)
compileAttributes()
compileAttributes()
knitr::opts_chunk$set(echo = TRUE, eval = T, warning=TRUE, message = TRUE, cache.lazy = FALSE)
rdsDir = "archive-rdsFiles"
knitr::opts_chunk$set(dev = c('pdf', 'png'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"))
genes = read.csv('New_CT_markers.txt')
library(GOsummaries)
GS_enrichment = gosummaries(genes)
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
GS_enrichment = gosummaries(genes, go_branches = c("BP"))
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500)
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500, hier_filtering = "none")
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500, hier_filtering = "stingent", ordered_query=F)
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500, hier_filtering = "moderate", ordered_query=F)
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500, hier_filtering = "stringent", ordered_query=F)
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500, hier_filtering = "strong", ordered_query=F)
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
GS_enrichment = gosummaries(genes, go_branches = c("BP"), max_set_size = 500, hier_filtering = "strong", ordered_query=T)
plot(GS_enrichment, fontsize = 8, filename = "GO_enrichment.pdf")
